//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

legend {
  margin-bottom: @line-height-computed;
  font-size: (@font-size-base * 1.5);
  color: @gray-dark;
}


// Normalize form controls

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 3px 0 0;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  font-size: @font-size-base;
  line-height: @line-height-base;
  background-color: @input-bg;
  border: 1px solid @input-border;
  border-top-color: darken(@input-border, 10%);
  border-radius: @input-border-radius;
  .box-shadow(none);
  .transition(none);

  &:hover {
    border: 1px solid #b9b9b9;
    border-top-color: #a0a0a0;
    .box-shadow(inset 0 1px 2px rgba(0,0,0,0.1));
  }

  &:focus {
    border-color: @brand-primary;
    outline: 0;
    .box-shadow(inset 0 1px 2px rgba(0,0,0,0.3));
    .transition(none);
  }

  // Disabled and read-only inputs
  // Note: HTML5 says that inputs under a fieldset > legend:first-child won't be
  //   disabled if the fieldset is disabled. Due to implementation difficulty,
  //   we don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    border: 1px solid #e5e5e5;
    &:hover,
    &:focus,
    &:active {
      border: 1px solid #e5e5e5;
      .box-shadow(none);
    }
  }
  &[readonly] & {
    border: 1px solid @input-border;
    &:hover,
    &:focus,
    &:active {
      border: 1px solid @input-border;
    }
  }

  textarea& {
    padding-right: 4px;
  }
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  min-height: @line-height-computed; // clear the floating input if there is no label text
}
input[type="radio"],
.radio input[type="radio"],
.radio-inline input[type="radio"],
input[type="checkbox"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  -webkit-appearance: none;
  appearance: none;
  width: 13px;
  height: 13px;
  background: white;
  border: 1px solid #dcdcdc;
  border-radius: 1px;
  position: relative;

  // override styles for IE
  box-sizing: content-box e("\9");
  width: 16px e("\9");
  height: 16px e("\9");
  border-width: 0 e("\9");

  &:focus {
    outline: none;
    border-color: @brand-primary;
  }

  &:active {
    border-color: #c6c6c6;
    background-color: #ebebeb;
    // override the bkgd color for IE
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#ffffffff', GradientType=0);
  }

  &:checked {
    background: #fff;
  }
}
input[type="radio"],
.radio input[type="radio"],
.radio-inline input[type="radio"] {
  border-radius: 1em;
  width: 15px;
  height: 15px;

  &:checked::after {
    content: '';
    display: block;
    position: relative;
    top: 3px;
    left: 3px;
    width: 7px;
    height: 7px;
    background: #666;
    border-radius: 1em;
  }
}
input[type="checkbox"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  &:hover {
    border-color: #c6c6c6;
    .box-shadow(inset 0 1px 1px rgba(0, 0, 0, 0.1));

    // no box shadow for IE
    box-shadow: none e("\9");
  }

  &:checked::after {
    content: url(../../img/checkmark.png);
    display: block;
    position: absolute;
    top: -6px;
    left: -5px;
  }
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!

.input-large {
  height: @input-height-large;
  padding: @padding-large-vertical @padding-large-horizontal;
  font-size: @font-size-large;
  border-radius: @border-radius-large;
}
.input-small {
  height: @input-height-small;
  padding: @padding-small-vertical @padding-small-horizontal;
  font-size: @font-size-small;
  border-radius: @border-radius-small;
}

select {
  &.input-large {
    height: @input-height-large;
    line-height: @input-height-large;
  }
  &.input-small {
    height: @input-height-small;
    line-height: @input-height-small;
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

// Warning
.has-warning {
  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}
// Error
.has-error {
  .form-control-validation(#dd4b39; #dd4b39; @state-danger-bg);
}
// Success
.has-success {
  .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  color: lighten(@text-color, 26.5%); // lighten the text some for contrast
}
